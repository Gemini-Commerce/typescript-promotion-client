/* tslint:disable */
/* eslint-disable */
/**
 * Promotion Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CouponPromotionResponseCouponResponse
 */
export interface CouponPromotionResponseCouponResponse {
    /**
     * 
     * @type {string}
     * @memberof CouponPromotionResponseCouponResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CouponPromotionResponseCouponResponse
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CouponPromotionResponseCouponResponse
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CouponPromotionResponseCouponResponse
     */
    'numberOfUses'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CouponPromotionResponseCouponResponse
     */
    'userGrns'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CouponPromotionResponseCouponResponse
     */
    'couponPromotionId'?: string;
}
/**
 * 
 * @export
 * @interface EvaluatePromotionsEligibilityResponsePromotions
 */
export interface EvaluatePromotionsEligibilityResponsePromotions {
    /**
     * 
     * @type {Array<string>}
     * @memberof EvaluatePromotionsEligibilityResponsePromotions
     */
    'promotionGrns'?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const GenerateCouponCodesRequestCharset = {
    AlphaNumeric: 'ALPHA_NUMERIC',
    Alpha: 'ALPHA',
    Numeric: 'NUMERIC'
} as const;

export type GenerateCouponCodesRequestCharset = typeof GenerateCouponCodesRequestCharset[keyof typeof GenerateCouponCodesRequestCharset];


/**
 * 
 * @export
 * @interface ListCouponPromotionsResponseCouponPromotion
 */
export interface ListCouponPromotionsResponseCouponPromotion {
    /**
     * 
     * @type {string}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'label'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'cartRule'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'cartItemsRule'?: Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'startAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'endAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'usesPerCode'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'usesPerCustomer'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'numberOfGlobalUses'?: number;
    /**
     * 
     * @type {PromotionCurrency}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'currency'?: PromotionCurrency;
    /**
     * 
     * @type {Array<PromotionCurrency>}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'currencies'?: Array<PromotionCurrency>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'segments'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ListCouponPromotionsResponseCouponPromotion
     */
    'stopFurtherRuleMaking'?: boolean;
}


/**
 * 
 * @export
 * @interface PromotionAddCouponCodesToPromotionRequest
 */
export interface PromotionAddCouponCodesToPromotionRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionAddCouponCodesToPromotionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionAddCouponCodesToPromotionRequest
     */
    'id'?: string;
    /**
     * 
     * @type {Array<PromotionCoupon>}
     * @memberof PromotionAddCouponCodesToPromotionRequest
     */
    'coupons'?: Array<PromotionCoupon>;
}
/**
 * 
 * @export
 * @interface PromotionAddCouponCodesToPromotionResponse
 */
export interface PromotionAddCouponCodesToPromotionResponse {
    /**
     * 
     * @type {Array<PromotionCouponError>}
     * @memberof PromotionAddCouponCodesToPromotionResponse
     */
    'errors'?: Array<PromotionCouponError>;
}
/**
 * 
 * @export
 * @interface PromotionApplyPromotionsOnCartRequest
 */
export interface PromotionApplyPromotionsOnCartRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'channel'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'market'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'customerGrn'?: string;
    /**
     * 
     * @type {Array<PromotionCartItemRequest>}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'items'?: Array<PromotionCartItemRequest>;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'PaymentSubtotal'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'ShipmentSubtotal'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'ItemsSubtotal'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'TaxSubtotal'?: PromotionMoney;
    /**
     * 
     * @type {PromotionCurrency}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'currency'?: PromotionCurrency;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'total'?: PromotionMoney;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'vatIncluded'?: boolean;
    /**
     * 
     * @type {PromotionPostalAddress}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'billingAddress'?: PromotionPostalAddress;
    /**
     * 
     * @type {PromotionPostalAddress}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'shippingAddress'?: PromotionPostalAddress;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'couponCodes'?: Array<string>;
    /**
     * 
     * @type {PromotionCustomerData}
     * @memberof PromotionApplyPromotionsOnCartRequest
     */
    'customer'?: PromotionCustomerData;
}


/**
 * 
 * @export
 * @interface PromotionApplyPromotionsOnCartResponse
 */
export interface PromotionApplyPromotionsOnCartResponse {
    /**
     * 
     * @type {Array<PromotionPromotionData>}
     * @memberof PromotionApplyPromotionsOnCartResponse
     */
    'promotions'?: Array<PromotionPromotionData>;
}
/**
 * 
 * @export
 * @interface PromotionCartItemRequest
 */
export interface PromotionCartItemRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionCartItemRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCartItemRequest
     */
    'productGrn'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionCartItemRequest
     */
    'quantity'?: number;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemRequest
     */
    'price'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemRequest
     */
    'unitPrice'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemRequest
     */
    'basePrice'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemRequest
     */
    'unitBasePrice'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemRequest
     */
    'vatAmount'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemRequest
     */
    'unitVatAmount'?: PromotionMoney;
    /**
     * 
     * @type {number}
     * @memberof PromotionCartItemRequest
     */
    'vatPercentage'?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PromotionCartItemRequest
     */
    'localizedName'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof PromotionCartItemRequest
     */
    'productCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCartItemRequest
     */
    'productSku'?: string;
}
/**
 * 
 * @export
 * @interface PromotionCartItemResponse
 */
export interface PromotionCartItemResponse {
    /**
     * 
     * @type {string}
     * @memberof PromotionCartItemResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCartItemResponse
     */
    'productGrn'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionCartItemResponse
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof PromotionCartItemResponse
     */
    'paidQuantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof PromotionCartItemResponse
     */
    'freeQuantity'?: number;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemResponse
     */
    'price'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemResponse
     */
    'unitPrice'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemResponse
     */
    'basePrice'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemResponse
     */
    'unitBasePrice'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemResponse
     */
    'vatAmount'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemResponse
     */
    'unitVatAmount'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemResponse
     */
    'listPrice'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemResponse
     */
    'unitListPrice'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemResponse
     */
    'discount'?: PromotionMoney;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionCartItemResponse
     */
    'unitDiscount'?: PromotionMoney;
    /**
     * 
     * @type {number}
     * @memberof PromotionCartItemResponse
     */
    'vatPercentage'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionCartItemResponse
     */
    'productCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCartItemResponse
     */
    'productSku'?: string;
}
/**
 * 
 * @export
 * @interface PromotionCartPromotionResponse
 */
export interface PromotionCartPromotionResponse {
    /**
     * 
     * @type {string}
     * @memberof PromotionCartPromotionResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCartPromotionResponse
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCartPromotionResponse
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCartPromotionResponse
     */
    'label'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionCartPromotionResponse
     */
    'cartRule'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionCartPromotionResponse
     */
    'cartItemsRule'?: Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCartPromotionResponse
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PromotionCartPromotionResponse
     */
    'startAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCartPromotionResponse
     */
    'endAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionCartPromotionResponse
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCartPromotionResponse
     */
    'stopFurtherRuleMaking'?: boolean;
    /**
     * 
     * @type {PromotionCurrency}
     * @memberof PromotionCartPromotionResponse
     */
    'currency'?: PromotionCurrency;
    /**
     * 
     * @type {Array<PromotionCurrency>}
     * @memberof PromotionCartPromotionResponse
     */
    'currencies'?: Array<PromotionCurrency>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCartPromotionResponse
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCartPromotionResponse
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCartPromotionResponse
     */
    'segments'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PromotionCartPromotionResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCartPromotionResponse
     */
    'updatedAt'?: string;
}


/**
 * 
 * @export
 * @interface PromotionCoupon
 */
export interface PromotionCoupon {
    /**
     * 
     * @type {string}
     * @memberof PromotionCoupon
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCoupon
     */
    'isEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface PromotionCouponError
 */
export interface PromotionCouponError {
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponError
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponError
     */
    'couponCode'?: string;
}
/**
 * 
 * @export
 * @interface PromotionCouponPromotionResponse
 */
export interface PromotionCouponPromotionResponse {
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponPromotionResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponPromotionResponse
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponPromotionResponse
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponPromotionResponse
     */
    'label'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionCouponPromotionResponse
     */
    'cartRule'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionCouponPromotionResponse
     */
    'cartItemsRule'?: Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCouponPromotionResponse
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponPromotionResponse
     */
    'startAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponPromotionResponse
     */
    'endAt'?: string;
    /**
     * 
     * @type {Array<CouponPromotionResponseCouponResponse>}
     * @memberof PromotionCouponPromotionResponse
     */
    'coupons'?: Array<CouponPromotionResponseCouponResponse>;
    /**
     * 
     * @type {number}
     * @memberof PromotionCouponPromotionResponse
     */
    'usesPerCode'?: number;
    /**
     * 
     * @type {number}
     * @memberof PromotionCouponPromotionResponse
     */
    'usesPerCustomer'?: number;
    /**
     * 
     * @type {PromotionCurrency}
     * @memberof PromotionCouponPromotionResponse
     */
    'currency'?: PromotionCurrency;
    /**
     * 
     * @type {Array<PromotionCurrency>}
     * @memberof PromotionCouponPromotionResponse
     */
    'currencies'?: Array<PromotionCurrency>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCouponPromotionResponse
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCouponPromotionResponse
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCouponPromotionResponse
     */
    'segments'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponPromotionResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponPromotionResponse
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCouponPromotionResponse
     */
    'stopFurtherRuleMaking'?: boolean;
}


/**
 * 
 * @export
 * @interface PromotionCreateCartPromotionRequest
 */
export interface PromotionCreateCartPromotionRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'label'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'cartRule'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'cartItemsRule'?: Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'startAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'endAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'stopFurtherRuleMaking'?: boolean;
    /**
     * 
     * @type {PromotionCurrency}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'currency'?: PromotionCurrency;
    /**
     * 
     * @type {Array<PromotionCurrency>}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'currencies'?: Array<PromotionCurrency>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCreateCartPromotionRequest
     */
    'segments'?: Array<string>;
}


/**
 * 
 * @export
 * @interface PromotionCreateCartPromotionResponse
 */
export interface PromotionCreateCartPromotionResponse {
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCartPromotionResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCartPromotionResponse
     */
    'grn'?: string;
}
/**
 * 
 * @export
 * @interface PromotionCreateCouponPromotionRequest
 */
export interface PromotionCreateCouponPromotionRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'label'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'cartRule'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'cartItemsRule'?: Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'startAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'endAt'?: string;
    /**
     * 
     * @type {Array<PromotionCoupon>}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'coupons'?: Array<PromotionCoupon>;
    /**
     * 
     * @type {number}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'usesPerCode'?: number;
    /**
     * 
     * @type {number}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'usesPerCustomer'?: number;
    /**
     * 
     * @type {PromotionCurrency}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'currency'?: PromotionCurrency;
    /**
     * 
     * @type {Array<PromotionCurrency>}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'currencies'?: Array<PromotionCurrency>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'segments'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'autoGenerateCouponCodes'?: boolean;
    /**
     * 
     * @type {PromotionGenerateCouponCodesRequest}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'autoGenerateCouponProperties'?: PromotionGenerateCouponCodesRequest;
    /**
     * 
     * @type {number}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCreateCouponPromotionRequest
     */
    'stopFurtherRuleMaking'?: boolean;
}


/**
 * 
 * @export
 * @interface PromotionCreateCouponPromotionResponse
 */
export interface PromotionCreateCouponPromotionResponse {
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCouponPromotionResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCreateCouponPromotionResponse
     */
    'grn'?: string;
    /**
     * 
     * @type {Array<PromotionCouponError>}
     * @memberof PromotionCreateCouponPromotionResponse
     */
    'errors'?: Array<PromotionCouponError>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PromotionCurrency = {
    Xxx: 'XXX',
    All: 'ALL',
    Dzd: 'DZD',
    Ars: 'ARS',
    Aud: 'AUD',
    Bsd: 'BSD',
    Bhd: 'BHD',
    Bdt: 'BDT',
    Amd: 'AMD',
    Bbd: 'BBD',
    Bmd: 'BMD',
    Btn: 'BTN',
    Bob: 'BOB',
    Bwp: 'BWP',
    Bzd: 'BZD',
    Sbd: 'SBD',
    Bnd: 'BND',
    Mmk: 'MMK',
    Bif: 'BIF',
    Khr: 'KHR',
    Cad: 'CAD',
    Cve: 'CVE',
    Kyd: 'KYD',
    Lkr: 'LKR',
    Clp: 'CLP',
    Cny: 'CNY',
    Cop: 'COP',
    Kmf: 'KMF',
    Crc: 'CRC',
    Hrk: 'HRK',
    Cup: 'CUP',
    Czk: 'CZK',
    Dkk: 'DKK',
    Dop: 'DOP',
    Svc: 'SVC',
    Etb: 'ETB',
    Ern: 'ERN',
    Fkp: 'FKP',
    Fjd: 'FJD',
    Djf: 'DJF',
    Gmd: 'GMD',
    Gip: 'GIP',
    Gtq: 'GTQ',
    Gnf: 'GNF',
    Gyd: 'GYD',
    Htg: 'HTG',
    Hnl: 'HNL',
    Hkd: 'HKD',
    Huf: 'HUF',
    Isk: 'ISK',
    Inr: 'INR',
    Idr: 'IDR',
    Irr: 'IRR',
    Iqd: 'IQD',
    Ils: 'ILS',
    Jmd: 'JMD',
    Jpy: 'JPY',
    Kzt: 'KZT',
    Jod: 'JOD',
    Kes: 'KES',
    Kpw: 'KPW',
    Krw: 'KRW',
    Kwd: 'KWD',
    Kgs: 'KGS',
    Lak: 'LAK',
    Lbp: 'LBP',
    Lsl: 'LSL',
    Lrd: 'LRD',
    Lyd: 'LYD',
    Ltl: 'LTL',
    Mop: 'MOP',
    Mwk: 'MWK',
    Myr: 'MYR',
    Mvr: 'MVR',
    Mro: 'MRO',
    Mur: 'MUR',
    Mxn: 'MXN',
    Mnt: 'MNT',
    Mdl: 'MDL',
    Mad: 'MAD',
    Omr: 'OMR',
    Nad: 'NAD',
    Npr: 'NPR',
    Ang: 'ANG',
    Awg: 'AWG',
    Vuv: 'VUV',
    Nzd: 'NZD',
    Nio: 'NIO',
    Ngn: 'NGN',
    Nok: 'NOK',
    Pkr: 'PKR',
    Pab: 'PAB',
    Pgk: 'PGK',
    Pyg: 'PYG',
    Pen: 'PEN',
    Php: 'PHP',
    Qar: 'QAR',
    Rub: 'RUB',
    Rwf: 'RWF',
    Shp: 'SHP',
    Std: 'STD',
    Sar: 'SAR',
    Scr: 'SCR',
    Sll: 'SLL',
    Sgd: 'SGD',
    Vnd: 'VND',
    Sos: 'SOS',
    Zar: 'ZAR',
    Ssp: 'SSP',
    Szl: 'SZL',
    Sek: 'SEK',
    Chf: 'CHF',
    Syp: 'SYP',
    Thb: 'THB',
    Top: 'TOP',
    Ttd: 'TTD',
    Aed: 'AED',
    Tnd: 'TND',
    Ugx: 'UGX',
    Mkd: 'MKD',
    Egp: 'EGP',
    Gbp: 'GBP',
    Tzs: 'TZS',
    Usd: 'USD',
    Uyu: 'UYU',
    Uzs: 'UZS',
    Wst: 'WST',
    Yer: 'YER',
    Twd: 'TWD',
    Cuc: 'CUC',
    Zwl: 'ZWL',
    Tmt: 'TMT',
    Ghs: 'GHS',
    Vef: 'VEF',
    Sdg: 'SDG',
    Uyi: 'UYI',
    Rsd: 'RSD',
    Mzn: 'MZN',
    Azn: 'AZN',
    Ron: 'RON',
    Che: 'CHE',
    Chw: 'CHW',
    Try: 'TRY',
    Xaf: 'XAF',
    Xcd: 'XCD',
    Xof: 'XOF',
    Xpf: 'XPF',
    Xba: 'XBA',
    Xbb: 'XBB',
    Xbc: 'XBC',
    Xbd: 'XBD',
    Xau: 'XAU',
    Xdr: 'XDR',
    Xag: 'XAG',
    Xpt: 'XPT',
    Xpd: 'XPD',
    Xua: 'XUA',
    Zmw: 'ZMW',
    Srd: 'SRD',
    Mga: 'MGA',
    Cou: 'COU',
    Afn: 'AFN',
    Tjs: 'TJS',
    Aoa: 'AOA',
    Byr: 'BYR',
    Bgn: 'BGN',
    Cdf: 'CDF',
    Bam: 'BAM',
    Eur: 'EUR',
    Mxv: 'MXV',
    Uah: 'UAH',
    Gel: 'GEL',
    Bov: 'BOV',
    Pln: 'PLN',
    Brl: 'BRL',
    Clf: 'CLF',
    Xsu: 'XSU',
    Usn: 'USN'
} as const;

export type PromotionCurrency = typeof PromotionCurrency[keyof typeof PromotionCurrency];


/**
 * 
 * @export
 * @interface PromotionCustomerData
 */
export interface PromotionCustomerData {
    /**
     * 
     * @type {string}
     * @memberof PromotionCustomerData
     */
    'customerGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCustomerData
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCustomerData
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCustomerData
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCustomerData
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionCustomerData
     */
    'segments'?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PromotionDataAffectedEntityType = {
    Unknown: 'AFFECTED_ENTITY_TYPE_UNKNOWN',
    PaymentSubtotal: 'AFFECTED_ENTITY_TYPE_PAYMENT_SUBTOTAL',
    ShipmentSubtotal: 'AFFECTED_ENTITY_TYPE_SHIPMENT_SUBTOTAL',
    ItemsSubtotal: 'AFFECTED_ENTITY_TYPE_ITEMS_SUBTOTAL',
    TaxSubtotal: 'AFFECTED_ENTITY_TYPE_TAX_SUBTOTAL',
    Total: 'AFFECTED_ENTITY_TYPE_TOTAL',
    CartItems: 'AFFECTED_ENTITY_TYPE_CART_ITEMS'
} as const;

export type PromotionDataAffectedEntityType = typeof PromotionDataAffectedEntityType[keyof typeof PromotionDataAffectedEntityType];


/**
 * 
 * @export
 * @interface PromotionDeleteCartPromotionRequest
 */
export interface PromotionDeleteCartPromotionRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionDeleteCartPromotionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionDeleteCartPromotionRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface PromotionDeleteCouponPromotionRequest
 */
export interface PromotionDeleteCouponPromotionRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionDeleteCouponPromotionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionDeleteCouponPromotionRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface PromotionEvaluatePromotionsEligibilityRequest
 */
export interface PromotionEvaluatePromotionsEligibilityRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionEvaluatePromotionsEligibilityRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionEvaluatePromotionsEligibilityRequest
     */
    'productGrns'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionEvaluatePromotionsEligibilityRequest
     */
    'promotionGrns'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PromotionEvaluatePromotionsEligibilityResponse
 */
export interface PromotionEvaluatePromotionsEligibilityResponse {
    /**
     * 
     * @type {{ [key: string]: EvaluatePromotionsEligibilityResponsePromotions; }}
     * @memberof PromotionEvaluatePromotionsEligibilityResponse
     */
    'productGrnToPromotionGrns'?: { [key: string]: EvaluatePromotionsEligibilityResponsePromotions; };
}
/**
 * 
 * @export
 * @interface PromotionGenerateCouponCodesRequest
 */
export interface PromotionGenerateCouponCodesRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionGenerateCouponCodesRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionGenerateCouponCodesRequest
     */
    'prefix'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionGenerateCouponCodesRequest
     */
    'suffix'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionGenerateCouponCodesRequest
     */
    'totalCoupons'?: number;
    /**
     * 
     * @type {number}
     * @memberof PromotionGenerateCouponCodesRequest
     */
    'couponLength'?: number;
    /**
     * 
     * @type {GenerateCouponCodesRequestCharset}
     * @memberof PromotionGenerateCouponCodesRequest
     */
    'charset'?: GenerateCouponCodesRequestCharset;
}


/**
 * 
 * @export
 * @interface PromotionGenerateCouponCodesResponse
 */
export interface PromotionGenerateCouponCodesResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionGenerateCouponCodesResponse
     */
    'couponCodes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PromotionGetCartPromotionByCodeRequest
 */
export interface PromotionGetCartPromotionByCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionGetCartPromotionByCodeRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionGetCartPromotionByCodeRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface PromotionGetCartPromotionRequest
 */
export interface PromotionGetCartPromotionRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionGetCartPromotionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionGetCartPromotionRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface PromotionGetCouponPromotionByCodeRequest
 */
export interface PromotionGetCouponPromotionByCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionGetCouponPromotionByCodeRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionGetCouponPromotionByCodeRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface PromotionGetCouponPromotionRequest
 */
export interface PromotionGetCouponPromotionRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionGetCouponPromotionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionGetCouponPromotionRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface PromotionListCartPromotionsRequest
 */
export interface PromotionListCartPromotionsRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionListCartPromotionsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionListCartPromotionsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionListCartPromotionsRequest
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @interface PromotionListCartPromotionsResponse
 */
export interface PromotionListCartPromotionsResponse {
    /**
     * 
     * @type {Array<PromotionCartPromotionResponse>}
     * @memberof PromotionListCartPromotionsResponse
     */
    'cartPromotions'?: Array<PromotionCartPromotionResponse>;
    /**
     * 
     * @type {string}
     * @memberof PromotionListCartPromotionsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface PromotionListCouponPromotionsRequest
 */
export interface PromotionListCouponPromotionsRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionListCouponPromotionsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionListCouponPromotionsRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionListCouponPromotionsRequest
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @interface PromotionListCouponPromotionsResponse
 */
export interface PromotionListCouponPromotionsResponse {
    /**
     * 
     * @type {Array<ListCouponPromotionsResponseCouponPromotion>}
     * @memberof PromotionListCouponPromotionsResponse
     */
    'couponPromotions'?: Array<ListCouponPromotionsResponseCouponPromotion>;
    /**
     * 
     * @type {string}
     * @memberof PromotionListCouponPromotionsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface PromotionMoney
 */
export interface PromotionMoney {
    /**
     * The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.
     * @type {string}
     * @memberof PromotionMoney
     */
    'units'?: string;
    /**
     * Number of micro (10^-6) units of the amount. The value must be between -999,999 and +999,999 inclusive. If `units` is positive, `micros` must be positive or zero. If `units` is zero, `micros` can be positive, zero, or negative. If `units` is negative, `micros` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `micros`=-750,000.
     * @type {number}
     * @memberof PromotionMoney
     */
    'micros'?: number;
}
/**
 * Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains).  In typical usage an address would be created via user input or from importing existing data, depending on the type of process.  Advice on address input / editing:  - Use an i18n-ready address widget such as    https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of   fields outside countries where that field is used.  For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
 * @export
 * @interface PromotionPostalAddress
 */
export interface PromotionPostalAddress {
    /**
     * The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.  All new revisions **must** be backward compatible with old revisions.
     * @type {number}
     * @memberof PromotionPostalAddress
     */
    'revision'?: number;
    /**
     * Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland.
     * @type {string}
     * @memberof PromotionPostalAddress
     */
    'regionCode'?: string;
    /**
     * Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address\' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).  Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".
     * @type {string}
     * @memberof PromotionPostalAddress
     */
    'languageCode'?: string;
    /**
     * Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
     * @type {string}
     * @memberof PromotionPostalAddress
     */
    'postalCode'?: string;
    /**
     * Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d\'Ivoire).
     * @type {string}
     * @memberof PromotionPostalAddress
     */
    'sortingCode'?: string;
    /**
     * Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don\'t use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
     * @type {string}
     * @memberof PromotionPostalAddress
     */
    'administrativeArea'?: string;
    /**
     * Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
     * @type {string}
     * @memberof PromotionPostalAddress
     */
    'locality'?: string;
    /**
     * Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
     * @type {string}
     * @memberof PromotionPostalAddress
     */
    'sublocality'?: string;
    /**
     * Unstructured address lines describing the lower levels of an address.  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language.  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
     * @type {Array<string>}
     * @memberof PromotionPostalAddress
     */
    'addressLines'?: Array<string>;
    /**
     * Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information.
     * @type {Array<string>}
     * @memberof PromotionPostalAddress
     */
    'recipients'?: Array<string>;
    /**
     * Optional. The name of the organization at the address.
     * @type {string}
     * @memberof PromotionPostalAddress
     */
    'organization'?: string;
    /**
     * Optional.
     * @type {string}
     * @memberof PromotionPostalAddress
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface PromotionPromotionData
 */
export interface PromotionPromotionData {
    /**
     * 
     * @type {string}
     * @memberof PromotionPromotionData
     */
    'promotionGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionPromotionData
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionPromotionData
     */
    'payload'?: string;
    /**
     * 
     * @type {Array<PromotionCartItemResponse>}
     * @memberof PromotionPromotionData
     */
    'cartItems'?: Array<PromotionCartItemResponse>;
    /**
     * 
     * @type {string}
     * @memberof PromotionPromotionData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionPromotionData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionPromotionData
     */
    'couponCode'?: string;
    /**
     * 
     * @type {PromotionMoney}
     * @memberof PromotionPromotionData
     */
    'discount'?: PromotionMoney;
    /**
     * 
     * @type {PromotionDataAffectedEntityType}
     * @memberof PromotionPromotionData
     */
    'affectedEntityType'?: PromotionDataAffectedEntityType;
}


/**
 * 
 * @export
 * @interface PromotionUniquenessCheckCouponCodesRequest
 */
export interface PromotionUniquenessCheckCouponCodesRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionUniquenessCheckCouponCodesRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionUniquenessCheckCouponCodesRequest
     */
    'couponCodes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PromotionUniquenessCheckCouponCodesResponse
 */
export interface PromotionUniquenessCheckCouponCodesResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionUniquenessCheckCouponCodesResponse
     */
    'uniqueCouponCodes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionUniquenessCheckCouponCodesResponse
     */
    'alreadyUsedCouponCodes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PromotionUpdateCartPromotionRequest
 */
export interface PromotionUpdateCartPromotionRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCartPromotionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCartPromotionRequest
     */
    'id'?: string;
    /**
     * 
     * @type {PromotionUpdateCartPromotionRequestPayload}
     * @memberof PromotionUpdateCartPromotionRequest
     */
    'payload'?: PromotionUpdateCartPromotionRequestPayload;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionUpdateCartPromotionRequest
     */
    'payloadMask'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PromotionUpdateCartPromotionRequestPayload
 */
export interface PromotionUpdateCartPromotionRequestPayload {
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'label'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'cartRule'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'cartItemsRule'?: Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'startAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'endAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'stopFurtherRuleMaking'?: boolean;
    /**
     * 
     * @type {PromotionCurrency}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'currency'?: PromotionCurrency;
    /**
     * 
     * @type {Array<PromotionCurrency>}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'currencies'?: Array<PromotionCurrency>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionUpdateCartPromotionRequestPayload
     */
    'segments'?: Array<string>;
}


/**
 * 
 * @export
 * @interface PromotionUpdateCouponPromotionRequest
 */
export interface PromotionUpdateCouponPromotionRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCouponPromotionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCouponPromotionRequest
     */
    'id'?: string;
    /**
     * 
     * @type {PromotionUpdateCouponPromotionRequestPayload}
     * @memberof PromotionUpdateCouponPromotionRequest
     */
    'payload'?: PromotionUpdateCouponPromotionRequestPayload;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionUpdateCouponPromotionRequest
     */
    'payloadMask'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PromotionUpdateCouponPromotionRequestPayload
 */
export interface PromotionUpdateCouponPromotionRequestPayload {
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'label'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'cartRule'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'cartItemsRule'?: Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'startAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'endAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'usesPerCode'?: number;
    /**
     * 
     * @type {number}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'usesPerCustomer'?: number;
    /**
     * 
     * @type {PromotionCurrency}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'currency'?: PromotionCurrency;
    /**
     * 
     * @type {Array<PromotionCurrency>}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'currencies'?: Array<PromotionCurrency>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'markets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'segments'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionUpdateCouponPromotionRequestPayload
     */
    'stopFurtherRuleMaking'?: boolean;
}


/**
 * 
 * @export
 * @interface PromotionUpdateCouponsRequest
 */
export interface PromotionUpdateCouponsRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCouponsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCouponsRequest
     */
    'promotionId'?: string;
    /**
     * 
     * @type {Array<PromotionCoupon>}
     * @memberof PromotionUpdateCouponsRequest
     */
    'coupons'?: Array<PromotionCoupon>;
}
/**
 * 
 * @export
 * @interface PromotionUpdateCouponsResponse
 */
export interface PromotionUpdateCouponsResponse {
    /**
     * 
     * @type {Array<PromotionCoupon>}
     * @memberof PromotionUpdateCouponsResponse
     */
    'coupons'?: Array<PromotionCoupon>;
}
/**
 * 
 * @export
 * @interface PromotionUpdateCouponsUsageRequest
 */
export interface PromotionUpdateCouponsUsageRequest {
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCouponsUsageRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionUpdateCouponsUsageRequest
     */
    'codes'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCouponsUsageRequest
     */
    'userGrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionUpdateCouponsUsageRequest
     */
    'usageDate'?: string;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    'value'?: string;
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the `Value` type union.   The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.
 * @export
 * @enum {string}
 */

export const ProtobufNullValue = {
    NullValue: 'NULL_VALUE'
} as const;

export type ProtobufNullValue = typeof ProtobufNullValue[keyof typeof ProtobufNullValue];


/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}

/**
 * PromotionApi - axios parameter creator
 * @export
 */
export const PromotionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PromotionAddCouponCodesToPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionAddCouponCodesToPromotion: async (body: PromotionAddCouponCodesToPromotionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionAddCouponCodesToPromotion', 'body', body)
            const localVarPath = `/promotion.Promotion/AddCouponCodesToPromotion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary APPLY PROMOTION
         * @param {PromotionApplyPromotionsOnCartRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionApplyPromotionsOnCart: async (body: PromotionApplyPromotionsOnCartRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionApplyPromotionsOnCart', 'body', body)
            const localVarPath = `/promotion.Promotion/ApplyPromotionsOnCart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CART PROMOTION
         * @param {PromotionCreateCartPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionCreateCartPromotion: async (body: PromotionCreateCartPromotionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionCreateCartPromotion', 'body', body)
            const localVarPath = `/promotion.Promotion/CreateCartPromotion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary COUPON PROMOTION
         * @param {PromotionCreateCouponPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionCreateCouponPromotion: async (body: PromotionCreateCouponPromotionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionCreateCouponPromotion', 'body', body)
            const localVarPath = `/promotion.Promotion/CreateCouponPromotion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionDeleteCartPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionDeleteCartPromotion: async (body: PromotionDeleteCartPromotionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionDeleteCartPromotion', 'body', body)
            const localVarPath = `/promotion.Promotion/DeleteCartPromotion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionDeleteCouponPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionDeleteCouponPromotion: async (body: PromotionDeleteCouponPromotionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionDeleteCouponPromotion', 'body', body)
            const localVarPath = `/promotion.Promotion/DeleteCouponPromotion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionEvaluatePromotionsEligibilityRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionEvaluatePromotionsEligibility: async (body: PromotionEvaluatePromotionsEligibilityRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionEvaluatePromotionsEligibility', 'body', body)
            const localVarPath = `/promotion.Promotion/EvaluatePromotionsEligibility`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary COUPON GENERATION
         * @param {PromotionGenerateCouponCodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionGenerateCouponCodes: async (body: PromotionGenerateCouponCodesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionGenerateCouponCodes', 'body', body)
            const localVarPath = `/promotion.Promotion/GenerateCouponCodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionGetCartPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionGetCartPromotion: async (body: PromotionGetCartPromotionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionGetCartPromotion', 'body', body)
            const localVarPath = `/promotion.Promotion/GetCartPromotion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionGetCartPromotionByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionGetCartPromotionByCode: async (body: PromotionGetCartPromotionByCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionGetCartPromotionByCode', 'body', body)
            const localVarPath = `/promotion.Promotion/GetCartPromotionByCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionGetCouponPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionGetCouponPromotion: async (body: PromotionGetCouponPromotionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionGetCouponPromotion', 'body', body)
            const localVarPath = `/promotion.Promotion/GetCouponPromotion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionGetCouponPromotionByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionGetCouponPromotionByCode: async (body: PromotionGetCouponPromotionByCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionGetCouponPromotionByCode', 'body', body)
            const localVarPath = `/promotion.Promotion/GetCouponPromotionByCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionListCartPromotionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionListCartPromotions: async (body: PromotionListCartPromotionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionListCartPromotions', 'body', body)
            const localVarPath = `/promotion.Promotion/ListCartPromotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionListCouponPromotionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionListCouponPromotions: async (body: PromotionListCouponPromotionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionListCouponPromotions', 'body', body)
            const localVarPath = `/promotion.Promotion/ListCouponPromotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionUniquenessCheckCouponCodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionUniquenessCheckCouponCodes: async (body: PromotionUniquenessCheckCouponCodesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionUniquenessCheckCouponCodes', 'body', body)
            const localVarPath = `/promotion.Promotion/UniquenessCheckCouponCodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionUpdateCartPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionUpdateCartPromotion: async (body: PromotionUpdateCartPromotionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionUpdateCartPromotion', 'body', body)
            const localVarPath = `/promotion.Promotion/UpdateCartPromotion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionUpdateCouponPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionUpdateCouponPromotion: async (body: PromotionUpdateCouponPromotionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionUpdateCouponPromotion', 'body', body)
            const localVarPath = `/promotion.Promotion/UpdateCouponPromotion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates only existing coupon codes
         * @param {PromotionUpdateCouponsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionUpdateCoupons: async (body: PromotionUpdateCouponsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionUpdateCoupons', 'body', body)
            const localVarPath = `/promotion.Promotion/UpdateCoupons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PromotionUpdateCouponsUsageRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionUpdateCouponsUsage: async (body: PromotionUpdateCouponsUsageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionUpdateCouponsUsage', 'body', body)
            const localVarPath = `/promotion.Promotion/UpdateCouponsUsage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromotionApi - functional programming interface
 * @export
 */
export const PromotionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromotionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PromotionAddCouponCodesToPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionAddCouponCodesToPromotion(body: PromotionAddCouponCodesToPromotionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionAddCouponCodesToPromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionAddCouponCodesToPromotion(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary APPLY PROMOTION
         * @param {PromotionApplyPromotionsOnCartRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionApplyPromotionsOnCart(body: PromotionApplyPromotionsOnCartRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionApplyPromotionsOnCartResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionApplyPromotionsOnCart(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary CART PROMOTION
         * @param {PromotionCreateCartPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionCreateCartPromotion(body: PromotionCreateCartPromotionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionCreateCartPromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionCreateCartPromotion(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary COUPON PROMOTION
         * @param {PromotionCreateCouponPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionCreateCouponPromotion(body: PromotionCreateCouponPromotionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionCreateCouponPromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionCreateCouponPromotion(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionDeleteCartPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionDeleteCartPromotion(body: PromotionDeleteCartPromotionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionDeleteCartPromotion(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionDeleteCouponPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionDeleteCouponPromotion(body: PromotionDeleteCouponPromotionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionDeleteCouponPromotion(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionEvaluatePromotionsEligibilityRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionEvaluatePromotionsEligibility(body: PromotionEvaluatePromotionsEligibilityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionEvaluatePromotionsEligibilityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionEvaluatePromotionsEligibility(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary COUPON GENERATION
         * @param {PromotionGenerateCouponCodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionGenerateCouponCodes(body: PromotionGenerateCouponCodesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionGenerateCouponCodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionGenerateCouponCodes(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionGetCartPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionGetCartPromotion(body: PromotionGetCartPromotionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionCartPromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionGetCartPromotion(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionGetCartPromotionByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionGetCartPromotionByCode(body: PromotionGetCartPromotionByCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionCartPromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionGetCartPromotionByCode(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionGetCouponPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionGetCouponPromotion(body: PromotionGetCouponPromotionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionCouponPromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionGetCouponPromotion(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionGetCouponPromotionByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionGetCouponPromotionByCode(body: PromotionGetCouponPromotionByCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionCouponPromotionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionGetCouponPromotionByCode(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionListCartPromotionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionListCartPromotions(body: PromotionListCartPromotionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionListCartPromotionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionListCartPromotions(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionListCouponPromotionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionListCouponPromotions(body: PromotionListCouponPromotionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionListCouponPromotionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionListCouponPromotions(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionUniquenessCheckCouponCodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionUniquenessCheckCouponCodes(body: PromotionUniquenessCheckCouponCodesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionUniquenessCheckCouponCodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionUniquenessCheckCouponCodes(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionUpdateCartPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionUpdateCartPromotion(body: PromotionUpdateCartPromotionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionUpdateCartPromotion(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionUpdateCouponPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionUpdateCouponPromotion(body: PromotionUpdateCouponPromotionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionUpdateCouponPromotion(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates only existing coupon codes
         * @param {PromotionUpdateCouponsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionUpdateCoupons(body: PromotionUpdateCouponsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionUpdateCouponsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionUpdateCoupons(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PromotionUpdateCouponsUsageRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionUpdateCouponsUsage(body: PromotionUpdateCouponsUsageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionUpdateCouponsUsage(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PromotionApi - factory interface
 * @export
 */
export const PromotionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromotionApiFp(configuration)
    return {
        /**
         * 
         * @param {PromotionAddCouponCodesToPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionAddCouponCodesToPromotion(body: PromotionAddCouponCodesToPromotionRequest, options?: any): AxiosPromise<PromotionAddCouponCodesToPromotionResponse> {
            return localVarFp.promotionAddCouponCodesToPromotion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary APPLY PROMOTION
         * @param {PromotionApplyPromotionsOnCartRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionApplyPromotionsOnCart(body: PromotionApplyPromotionsOnCartRequest, options?: any): AxiosPromise<PromotionApplyPromotionsOnCartResponse> {
            return localVarFp.promotionApplyPromotionsOnCart(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CART PROMOTION
         * @param {PromotionCreateCartPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionCreateCartPromotion(body: PromotionCreateCartPromotionRequest, options?: any): AxiosPromise<PromotionCreateCartPromotionResponse> {
            return localVarFp.promotionCreateCartPromotion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary COUPON PROMOTION
         * @param {PromotionCreateCouponPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionCreateCouponPromotion(body: PromotionCreateCouponPromotionRequest, options?: any): AxiosPromise<PromotionCreateCouponPromotionResponse> {
            return localVarFp.promotionCreateCouponPromotion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionDeleteCartPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionDeleteCartPromotion(body: PromotionDeleteCartPromotionRequest, options?: any): AxiosPromise<object> {
            return localVarFp.promotionDeleteCartPromotion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionDeleteCouponPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionDeleteCouponPromotion(body: PromotionDeleteCouponPromotionRequest, options?: any): AxiosPromise<object> {
            return localVarFp.promotionDeleteCouponPromotion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionEvaluatePromotionsEligibilityRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionEvaluatePromotionsEligibility(body: PromotionEvaluatePromotionsEligibilityRequest, options?: any): AxiosPromise<PromotionEvaluatePromotionsEligibilityResponse> {
            return localVarFp.promotionEvaluatePromotionsEligibility(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary COUPON GENERATION
         * @param {PromotionGenerateCouponCodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionGenerateCouponCodes(body: PromotionGenerateCouponCodesRequest, options?: any): AxiosPromise<PromotionGenerateCouponCodesResponse> {
            return localVarFp.promotionGenerateCouponCodes(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionGetCartPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionGetCartPromotion(body: PromotionGetCartPromotionRequest, options?: any): AxiosPromise<PromotionCartPromotionResponse> {
            return localVarFp.promotionGetCartPromotion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionGetCartPromotionByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionGetCartPromotionByCode(body: PromotionGetCartPromotionByCodeRequest, options?: any): AxiosPromise<PromotionCartPromotionResponse> {
            return localVarFp.promotionGetCartPromotionByCode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionGetCouponPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionGetCouponPromotion(body: PromotionGetCouponPromotionRequest, options?: any): AxiosPromise<PromotionCouponPromotionResponse> {
            return localVarFp.promotionGetCouponPromotion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionGetCouponPromotionByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionGetCouponPromotionByCode(body: PromotionGetCouponPromotionByCodeRequest, options?: any): AxiosPromise<PromotionCouponPromotionResponse> {
            return localVarFp.promotionGetCouponPromotionByCode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionListCartPromotionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionListCartPromotions(body: PromotionListCartPromotionsRequest, options?: any): AxiosPromise<PromotionListCartPromotionsResponse> {
            return localVarFp.promotionListCartPromotions(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionListCouponPromotionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionListCouponPromotions(body: PromotionListCouponPromotionsRequest, options?: any): AxiosPromise<PromotionListCouponPromotionsResponse> {
            return localVarFp.promotionListCouponPromotions(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionUniquenessCheckCouponCodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionUniquenessCheckCouponCodes(body: PromotionUniquenessCheckCouponCodesRequest, options?: any): AxiosPromise<PromotionUniquenessCheckCouponCodesResponse> {
            return localVarFp.promotionUniquenessCheckCouponCodes(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionUpdateCartPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionUpdateCartPromotion(body: PromotionUpdateCartPromotionRequest, options?: any): AxiosPromise<object> {
            return localVarFp.promotionUpdateCartPromotion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionUpdateCouponPromotionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionUpdateCouponPromotion(body: PromotionUpdateCouponPromotionRequest, options?: any): AxiosPromise<object> {
            return localVarFp.promotionUpdateCouponPromotion(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates only existing coupon codes
         * @param {PromotionUpdateCouponsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionUpdateCoupons(body: PromotionUpdateCouponsRequest, options?: any): AxiosPromise<PromotionUpdateCouponsResponse> {
            return localVarFp.promotionUpdateCoupons(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PromotionUpdateCouponsUsageRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionUpdateCouponsUsage(body: PromotionUpdateCouponsUsageRequest, options?: any): AxiosPromise<object> {
            return localVarFp.promotionUpdateCouponsUsage(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PromotionApi - object-oriented interface
 * @export
 * @class PromotionApi
 * @extends {BaseAPI}
 */
export class PromotionApi extends BaseAPI {
    /**
     * 
     * @param {PromotionAddCouponCodesToPromotionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionAddCouponCodesToPromotion(body: PromotionAddCouponCodesToPromotionRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionAddCouponCodesToPromotion(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary APPLY PROMOTION
     * @param {PromotionApplyPromotionsOnCartRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionApplyPromotionsOnCart(body: PromotionApplyPromotionsOnCartRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionApplyPromotionsOnCart(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CART PROMOTION
     * @param {PromotionCreateCartPromotionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionCreateCartPromotion(body: PromotionCreateCartPromotionRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionCreateCartPromotion(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary COUPON PROMOTION
     * @param {PromotionCreateCouponPromotionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionCreateCouponPromotion(body: PromotionCreateCouponPromotionRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionCreateCouponPromotion(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionDeleteCartPromotionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionDeleteCartPromotion(body: PromotionDeleteCartPromotionRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionDeleteCartPromotion(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionDeleteCouponPromotionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionDeleteCouponPromotion(body: PromotionDeleteCouponPromotionRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionDeleteCouponPromotion(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionEvaluatePromotionsEligibilityRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionEvaluatePromotionsEligibility(body: PromotionEvaluatePromotionsEligibilityRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionEvaluatePromotionsEligibility(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary COUPON GENERATION
     * @param {PromotionGenerateCouponCodesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionGenerateCouponCodes(body: PromotionGenerateCouponCodesRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionGenerateCouponCodes(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionGetCartPromotionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionGetCartPromotion(body: PromotionGetCartPromotionRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionGetCartPromotion(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionGetCartPromotionByCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionGetCartPromotionByCode(body: PromotionGetCartPromotionByCodeRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionGetCartPromotionByCode(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionGetCouponPromotionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionGetCouponPromotion(body: PromotionGetCouponPromotionRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionGetCouponPromotion(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionGetCouponPromotionByCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionGetCouponPromotionByCode(body: PromotionGetCouponPromotionByCodeRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionGetCouponPromotionByCode(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionListCartPromotionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionListCartPromotions(body: PromotionListCartPromotionsRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionListCartPromotions(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionListCouponPromotionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionListCouponPromotions(body: PromotionListCouponPromotionsRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionListCouponPromotions(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionUniquenessCheckCouponCodesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionUniquenessCheckCouponCodes(body: PromotionUniquenessCheckCouponCodesRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionUniquenessCheckCouponCodes(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionUpdateCartPromotionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionUpdateCartPromotion(body: PromotionUpdateCartPromotionRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionUpdateCartPromotion(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionUpdateCouponPromotionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionUpdateCouponPromotion(body: PromotionUpdateCouponPromotionRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionUpdateCouponPromotion(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates only existing coupon codes
     * @param {PromotionUpdateCouponsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionUpdateCoupons(body: PromotionUpdateCouponsRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionUpdateCoupons(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PromotionUpdateCouponsUsageRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public promotionUpdateCouponsUsage(body: PromotionUpdateCouponsUsageRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionUpdateCouponsUsage(body, options).then((request) => request(this.axios, this.basePath));
    }
}



